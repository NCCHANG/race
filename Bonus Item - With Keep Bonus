#include <iostream>
#include <iomanip>
#include <chrono>
#include <thread>
#include <time.h>
#include <vector>
#include <algorithm>

using namespace std;
using namespace std::chrono;

//configuration
int height = 11;
int width = 49;
int box = 10;
int topRightCoordinate = 21;
int botRightCoordinate = 31;
int topLeftCoordinate = 10;
bool gameRunning = true;

//flash
char flash = 'f';
int flashXPosition = 1;
int flashYPosition = height - 1;
int flashLapLeft = 2;
bool flashEnded = false;

char superman = 's';
int supermanXPosition = 3;
int supermanYPosition = height - 1;
int supermanLapLeft = 2;
bool supermanEnded = false;

char batman = 'b'; //3-6
int batmanXPosition = 2;
int batmanYPosition = height - 1;
int batmanLapLeft = 2;
bool batmanEnded = false;

//for counting
int step;
int flashLocation = 0;
int supermanLocation = 0;
int batmanLocation = 0;

class Bonus {
    public:

    int bonusNum, temp = 0;
    char JKLFunc;
    int i = 0;
    int bonusXPosition = 0, bonusYPosition = 0;
    vector<int> bonusLocation;
    vector<int> bonusXLocation;
    vector<int> bonusYLocation;
    vector<int> bonusFunc;
    void calculateXY(int xCoordinate, int yCoordinate, int &racerLocation, int &racerxCoordinate, int &raceryCoordinate) {
        int coordinate = 0;
        while (coordinate < (box + 10)) {
            if (coordinate == racerLocation) {
                racerxCoordinate = xCoordinate; 
                raceryCoordinate = yCoordinate;
                break;
            }
            if ((coordinate >= topLeftCoordinate && coordinate < topRightCoordinate) || coordinate >= (topLeftCoordinate + box)){
                xCoordinate += 4;
            } else if (coordinate >= topRightCoordinate && coordinate < botRightCoordinate) {
                yCoordinate += 1;
            }  else if (coordinate >= botRightCoordinate && coordinate < box)  {
                xCoordinate -= 4;
            } else if (coordinate < topLeftCoordinate ||(coordinate < (topLeftCoordinate + box) && coordinate >= box)){
                yCoordinate -= 1;
            }
            
            coordinate++;
        } 
    }
    void moveForth(int xCoordinate, int yCoordinate, int &racerLocation, int &racerxCoordinate, int &raceryCoordinate) {
        
        racerLocation += 3;
        calculateXY(xCoordinate, yCoordinate, racerLocation, racerxCoordinate, raceryCoordinate);
    }
    void doubleSteps(int xCoordinate, int yCoordinate, int &racerLocation, int &racerxCoordinate, int &raceryCoordinate) {
        racerLocation *= 2;
        calculateXY(xCoordinate, yCoordinate, racerLocation, racerxCoordinate, raceryCoordinate);
    }
    void extraTurn(int step, int xCoordinate, int yCoordinate, int &racerLocation, int &racerxCoordinate, int &raceryCoordinate) {
        
        racerLocation += step;
        calculateXY(xCoordinate, yCoordinate, racerLocation, racerxCoordinate, raceryCoordinate);
    }
    void checkBonus(int step, int xInitial, int &racerXPosition, int &racerYPosition, int &racerLocation, string racername) {
    bool bonusHit = false;
    auto oX = find(bonusXLocation.begin(), bonusXLocation.end(), racerXPosition);
    auto oY = find(bonusYLocation.begin(), bonusYLocation.end(), racerYPosition);
    
    if (oX != bonusXLocation.end() && oY != bonusYLocation.end()) {
        for (int i = 0; i < bonusNum; i++) {
            if ((racerXPosition == bonusXLocation[i]) && racerYPosition == bonusYLocation[i]) {
                bonusHit = true;
                cout << "Do you want to use the bonus item immediately? (Y/N): ";
                char choice;
                cin >> choice;
                if (toupper(choice) == 'Y') {
                    switch(bonusFunc[i]) {
                        case 'J':
                            moveForth(xInitial, height-1, racerLocation, racerXPosition, racerYPosition);
                            cout << racername << " used bonus item & moved forward 3 steps." << endl << endl;
                            break;
                        case 'K':
                            doubleSteps(xInitial, height-1, racerLocation, racerXPosition, racerYPosition);
                            cout << racername << " used bonus item & doubled their steps." << endl << endl;
                            break;
                        case 'L':
                            extraTurn(step, xInitial, height-1, racerLocation, racerXPosition, racerYPosition);
                            cout << racername << " used bonus item & got an extra turn." << endl << endl;
                            break;
                        default:
                            break;
                    }
                } else {
                    keepBonus(racerXPosition, racername);
                }
            }
        }
    }

    if (bonusHit == false && racername == "Flash") {
        racerXPosition -= 1;
    } else if (bonusHit == false && racername == "Superman") {
        racerXPosition += 1;
    }
}

    
    void keepBonus(int racerXPosition, string racername) {
    cout << racername << " chose not to use the bonus item." << endl << endl;
    // Optionally, you can keep the bonus item for future use.
    // Here, I'm decrementing the position to prevent immediate reuse.
    if (racername == "Flash") {
        flashXPosition -= 1;
    } else if (racername == "Superman") {
        supermanXPosition -= 1;
    } else if (racername == "Batman") {
        batmanXPosition -= 1;
    }
}

    void bonusXYPosition(vector<int> myXbonus) {
        int xCoordinate = 2;
        int yCoordinate = height - 1;
        int coordinate = 0;
        while (coordinate < box) {
            if (myXbonus[i] == coordinate) {
                bonusXPosition = xCoordinate;
                bonusYPosition = yCoordinate;
                bonusXLocation.push_back(xCoordinate);
                bonusYLocation.push_back(yCoordinate);
                i++;
            }
            if ((coordinate >= topLeftCoordinate && coordinate < topRightCoordinate) || coordinate >= (topLeftCoordinate + box)){
                xCoordinate += 4;
            } else if (coordinate >= topRightCoordinate && coordinate < botRightCoordinate) {
                yCoordinate += 1;
            }  else if (coordinate >= botRightCoordinate && coordinate < box)  {
                xCoordinate -= 4;
            } else if (coordinate < topLeftCoordinate ||(coordinate < (topLeftCoordinate + box) && coordinate >= box)){
                yCoordinate -= 1;
            }
            
            coordinate ++;
        }  
    }
    void bonusFunc_inquiry() {
        cout << "Enter value for Bonus Item (J = Move forward 3 steps, K = Get double the move, L = Get an extra turn): ";
        for (int i=0; i < bonusNum; i++) { 
            cin >> JKLFunc;
            toupper(JKLFunc);
            bonusFunc.push_back(JKLFunc);
        }
    }
    vector<int>  bonus_inquiry() {
    
        cout << "Enter the desired total of Bonus Item for this game (2 to 6): ";
        cin >> bonusNum;
        if (bonusNum < 2 || bonusNum > 6){
            cout << "Please enter a Bonus Item amount that is within the range !" << endl;
            bonus_inquiry();
        }
        else {
            cout <<"Enter Bonus Item location In Ascending Order (1 to " << box-1 << "): " << endl;
        for (int i=0; i < bonusNum; i++) { 
            cin >> temp;
            bonusLocation.push_back(temp);
        }
        bonusFunc_inquiry();
        }
        return bonusLocation;
    }
    void printBonusInfo() { 
        int counter = 1;
        cout << endl;
        for (int i = 0; i<bonusNum; i++) {
            switch(bonusFunc[i]) {
                case 'J':
                case 'j':
                cout << "Bonus Item: " << counter << "  Function : Move forward 3 steps " << setw(2) << "  Location: " << bonusLocation[i] << setw(3) << endl;
                break;

                case 'K':
                case 'k':
                cout << "Bonus Item: " << counter << "  Function : Movement got doubled" << setw(2) << "  Location: " << bonusLocation[i] << setw(3) << endl;
                break;

                case 'L':
                case 'l':
                cout << "Bonus Item: " << counter << "  Function : Extra turn given " << setw(2) << "  Location: " << bonusLocation[i] << setw(3) << endl;
                break;

                default:
                cout << "Bonus Item: " << counter << "  No Bonus Item due to inserting invalid value " << setw(2) << "  Location: " << bonusLocation[i] << setw(3) << endl;
                break;
            }
            counter++;
        }
    }
} bonus ; 

class layout {
    void plusMinus(int x) { //+---+---+ (depends on the x)
        if (x%4 == 0) {
            cout << '+';
        } else {
            cout << '-';
        }
    }
    void plusMinusNotBorder(int x) { //+---+                +---+ (depends on the x)
        if ( x <= 4 || x >= width - 5) {
            plusMinus(x);
        } else {
            cout << ' ';
        }
    }
    void straightLineBorder (int x, int y, vector<int> myXbonus) { //|   |   |   |   |   |   |   | (depends on the x)
        bool printBonus = false;
        auto rx = find(bonus.bonusXLocation.begin(), bonus.bonusXLocation.end(), x);
        auto ry = find(bonus.bonusYLocation.begin(), bonus.bonusYLocation.end(), y);
        if (x%4 == 0) {
                cout << '|';
            } else if (x == flashXPosition && y == flashYPosition) {
            cout << flash;  
            } else if (x == supermanXPosition && y == supermanYPosition) {
            cout << superman;
            } else if (x == batmanXPosition && y == batmanYPosition) {
            cout << batman;
            } else if (rx != bonus.bonusXLocation.end() && ry != bonus.bonusYLocation.end()) {
                for (int i = 0; i<bonus.bonusNum; i++) {
                    if (x == bonus.bonusXLocation[i] && y == bonus.bonusYLocation[i]) {
                        cout << '*';
                        printBonus = true;
                    }
                }
                if (printBonus == false) {
                    cout << ' ';
                }
            } else {
                cout <<' ';
            }
    }
    void straightLineNotBorder (int x, int y, vector<int> myXbonus) { //|   |                |   | (depends on x)
        bool printBonus = false;
        vector<int>::iterator rx = find(bonus.bonusXLocation.begin(), bonus.bonusXLocation.end(), x);
        vector<int>::iterator ry = find(bonus.bonusYLocation.begin(), bonus.bonusYLocation.end(), y);
        if ( x==0 || x==4 || x==width - 5 || x==width - 1) {
            cout << '|';
        } else if (x == flashXPosition && y == flashYPosition) {
            cout << flash;    
        } else if (x == supermanXPosition && y == supermanYPosition) {
            cout << superman;
        } else if (x == batmanXPosition && y == batmanYPosition) {
            cout << batman;
        } else if (rx != bonus.bonusXLocation.end() && ry != bonus.bonusYLocation.end()) {
            for (int i = 0; i<bonus.bonusNum; i++) {
                if (x == bonus.bonusXLocation[i] && y == bonus.bonusYLocation[i]) {
                    cout << '*';
                    printBonus = true;
                }
            }
            if (printBonus == false) {
                cout << ' ';
            } 
        } else {
            cout << ' ';
        }
    }
    
    public:
    void printLayout(vector<int> myXbonus= {}) {
        for (int x = 0; x < width; x++) // +---+---+---
        {
            plusMinus(x);
        }
        for (int y = 0; y < height; y++)
        {
            cout << '\n';
            //|   |    | section
            for (int x = 0; x < width; x++) //|   |   |   |   | 
            {
                if (y == 0 || y == height-1) {
                    straightLineBorder(x, y, myXbonus);
                }
                else {
                    straightLineNotBorder(x, y, myXbonus);
                }
            }
            cout << '\n';
            //plusminus section
            for (int x = 0; x < width; x++) // +---+---+---
            {
                if (y==0 || y==height-2 || y==height-1)
                {
                    plusMinus(x);
                } else {
                    plusMinusNotBorder(x);
                }
            }
        }
        }
};

void checkWinner()
{
    if (flashLocation > supermanLocation && flashLocation > batmanLocation && flashEnded == true) {
        cout << endl << "Flash Won!" << endl;
        gameRunning = false;
    } else if (supermanLocation > flashLocation && supermanLocation > batmanLocation && supermanEnded == true) {
        cout << endl << "Superman Won!" << endl;
        gameRunning = false;
    } else if (batmanLocation > supermanLocation && batmanLocation > flashLocation && batmanEnded == true) {
        cout << endl << "Batman Won!" << endl;
        gameRunning = false;
    } else if ((batmanLocation == flashLocation == supermanLocation) && 
                (batmanEnded == true && flashEnded == true && supermanEnded == true))
    {
        cout << endl << "Draw!" << endl;
    } else if (supermanLocation == flashLocation && flashEnded == true && supermanEnded == true)
    {
        cout << endl << "Draw!" << endl;
    } else if (supermanLocation == batmanLocation && batmanEnded == true && supermanEnded == true)
    {
        cout << endl << "Draw!" << endl;
    } else if (batmanLocation == flashLocation && flashEnded == true && batmanEnded == true)
    {
        cout << endl << "Draw!" << endl;
    }
}

void logic(int coordinateX, int &racerlocation, int &racerX, int &racerY,
            int &roundLeft, bool &playerEnd, int coordinateY = height - 1) {
    int coordinate = 0;
    int ox = coordinateX;
    int oy = coordinateY;
    //check if round end
    if (racerlocation >= box && roundLeft != 1) {
        racerlocation -= box;
        roundLeft -= 1;
    } else if (racerlocation >= box && roundLeft == 1) {
        playerEnd = true;
    }
    //getting x and y for the coordination
    while (coordinate < (box + 10)) {
        if (racerlocation == coordinate) {
            racerX = coordinateX;
            racerY = coordinateY;
            break;
        }
        if ((coordinate >= topLeftCoordinate && coordinate < topRightCoordinate) || coordinate >= (topLeftCoordinate + box)){
            coordinateX += 4;
        } else if (coordinate >= topRightCoordinate && coordinate < botRightCoordinate) {
            coordinateY += 1;
        }  else if (coordinate >= botRightCoordinate && coordinate < box)  {
            coordinateX -= 4;
        } else if (coordinate < topLeftCoordinate ||(coordinate < (topLeftCoordinate + box) && coordinate >= box)){
            coordinateY -= 1;
        }
        
        coordinate ++;
    }  
}

void box_inquiry() {
    int boxExtraNeeded;
    cout << "How many block do you need? (minimum 42 box and must be even number):" ;
    cin >> box;
    if (box % 2 != 0 || box < 42){
        cout << "Please enter a valid block amount!" << endl;
        box_inquiry();
    }
    boxExtraNeeded = box - 42;
    while (boxExtraNeeded > 0) {
        height += 1;   // expand verticcal
        boxExtraNeeded -= 2;
        topLeftCoordinate ++;
        topRightCoordinate ++;
        botRightCoordinate += 2;
        if (boxExtraNeeded > 0) { 
            width += 4;  //(1 box = 4width (up and down)) expand horizontal
            boxExtraNeeded -= 2;
            topRightCoordinate ++;
            botRightCoordinate ++;
        }
    }
    flashYPosition = height - 1;
    supermanYPosition = height - 1;
    batmanYPosition = height - 1;
}

void lap_inquiry() {
    int num_of_lap;
    do {
        cout << "Number of Lap: ";
        cin >> num_of_lap;
    } while (num_of_lap < 1);
    flashLapLeft = num_of_lap;
    supermanLapLeft = num_of_lap;
    batmanLapLeft = num_of_lap;
}

void flashMove()
{
    srand(time(0));
    step = 2 + (rand() % 5); // 2 - 6
    flashLocation += step;
    cout << "Flash move " << step << " steps." << endl;
    
    logic(1,flashLocation,flashXPosition,flashYPosition,flashLapLeft,flashEnded);
}

void supermanMove()
{
    srand(time(0));
    step = 3 + (rand() % 3); //3 - 5
    supermanLocation += step;
    cout << "Superman move " << step << " steps." << endl;
    
    logic(3,supermanLocation,supermanXPosition,supermanYPosition,supermanLapLeft,supermanEnded);
}

void  batmanMove()
{
    srand(time(0));
    step = 3 + (rand() % 4); //3 - 6
    batmanLocation += step;
    cout << endl << "Batman move " << step << " steps." << endl;
    
    logic(2,batmanLocation,batmanXPosition,batmanYPosition,batmanLapLeft,batmanEnded);
}

int main()
{
    string confirmation;
    layout l;
    box_inquiry();
    lap_inquiry();
    bonus.bonusLocation = bonus.bonus_inquiry();
    bonus.bonusXYPosition(bonus.bonusLocation);
    bonus.printBonusInfo();
    l.printLayout(bonus.bonusLocation);
    cout << endl;
    while (gameRunning) {
        this_thread::sleep_for(milliseconds(1300)); //pause for 1.3sec
        batmanMove();
        bonus.checkBonus(step, 2, batmanXPosition, batmanYPosition, batmanLocation, "Batman");
        supermanMove();
        supermanXPosition -= 1;
        bonus.checkBonus(step, 3, supermanXPosition, supermanYPosition, supermanLocation, "Superman");
        flashMove();
        flashXPosition += 1;
        bonus.checkBonus(step, 1, flashXPosition, flashYPosition, flashLocation, "Flash");
        l.printLayout();
        checkWinner();
        cout << endl;
    }
    cout << endl;
    system("pause");
}
