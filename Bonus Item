#include <iostream>
#include <chrono>
#include <thread>
#include <time.h>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>

using namespace std;


//configuration
int height = 11;
int width = 49;

int box = 10;
int topRightCoordinate = 21;
int botRightCoordinate = 31;
int topLeftCoordinate = 10;

bool gameRunning = true;

//flash
char flash = 'f';
int flashXPosition = 1;
int flashYPosition = height - 1;
int flashLapLeft = 2;
bool flashEnded = false;

char superman = 's';
int supermanXPosition = 3;
int supermanYPosition = height - 1;
int supermanLapLeft = 2;
bool supermanEnded = false;

char batman = 'b'; //3-6
int batmanXPosition = 2;
int batmanYPosition = height - 1;
int batmanLapLeft = 2;
bool batmanEnded = false;

//for counting
int step;
int flashLocation = 0;
int supermanLocation = 0;
int batmanLocation = 0;

//Bonus Item
int bonusX = 0;
int bonusY = 0;


class layout {
    void plusMinus(int x) { //+---+---+ (depends on the x)
        if (x%4 == 0) {
            cout << '+';
        } else {
            cout << '-';
        }
    }

    void plusMinusNotBorder(int x) { //+---+                +---+ (depends on the x)
        if ( x <= 4 || x >= width - 5) {
            plusMinus(x);
        } else {
            cout << ' ';
        }
    }

    void straightLineBorder (int x, int y) { //|   |   |   |   |   |   |   | (depends on the x)
        if (x%4 == 0) {
                cout << '|';
            } else if (x == flashXPosition && y == flashYPosition) {
                cout << flash;  
            } else if (x == supermanXPosition && y == supermanYPosition) {
                cout << superman;
            } else if (x == batmanXPosition && y == batmanYPosition) {
                cout << batman;
            } else if (x == bonusX && y == bonusY){
                cout << 'O';
            } else {
                cout << ' ';
            }
    }

    void straightLineNotBorder (int x, int y) { //|   |                |   | (depends on x)
        if ( x==0 || x==4 || x==width - 5 || x==width - 1) {
            cout << '|';
        } else if (x == flashXPosition && y == flashYPosition) {
            cout << flash;    
        } else if (x == supermanXPosition && y == supermanYPosition) {
            cout << superman;
        } else if (x == batmanXPosition && y == batmanYPosition) {
            cout << batman;
        } else if (x == bonusX && y == bonusY){
            cout << 'O';
        }else {
            cout << ' ';
        }
    }
    
    public:

    void printLayout() {
        for (int x = 0; x < width; x++) // +---+---+---
        {
            plusMinus(x);
        }


        for (int y = 0; y < height; y++)
        {
            cout << '\n';
            //|   |    | section
            for (int x = 0; x < width; x++) //|   |   |   |   | 
            {
                if (y == 0 || y == height-1) {
                    straightLineBorder(x, y);
                }
                else {
                    straightLineNotBorder(x, y);
                }
            }

            cout << '\n';
            //plusminus section
            for (int x = 0; x < width; x++) // +---+---+---
            {
                if (y==0 || y==height-2 || y==height-1)
                {
                    plusMinus(x);
                } else {
                    plusMinusNotBorder(x);
                }
            }
        }
        }
};


struct Bonus {
    int bonusNum = 0;
    int box = 10;
    vector<int> bonusX;
    vector<int> bonusY;
    vector<int> bonusFunc;
    vector<int> bonusLocation;

    void initializeBonusPositions() {
        for (int i = 0; i < box; i++) {
            int x = getRandomNumber(0, width - 1);
            int y = getRandomNumber(1, height - 2);
            bonusX.push_back(x);
            bonusY.push_back(y);
            bonusFunc.push_back(getRandomBonusFunction());
            bonusLocation.push_back(0);
        }
    }

    int getRandomNumber(int min, int max) {
        return rand() % (max - min + 1) + min;
    }

    int getRandomBonusFunction() {
        return rand() % 3;
    }

    void calculateXY(int bonusX, int bonusY, int &racerLocation, int &racerX, int &racerY) {
        int coordinate = 0;
        while (coordinate < (box + 10)) {
            if (coordinate == racerLocation) {
                racerX = bonusX;
                racerY = bonusY;
                break;
            }

            if ((coordinate >= 0 && coordinate < 10) || coordinate >= (0 + box)) {
                bonusX += 4;
            } else if (coordinate >= 10 && coordinate < 20) {
                bonusY += 1;
            } else if (coordinate >= 20 && coordinate < 30) {
                bonusX -= 4;
            } else if (coordinate < 0 || (coordinate < (0 + box) && coordinate >= box)) {
                bonusY -= 1;
            }
            coordinate++;
        }
    }

    void generateBonusItem(int bonusX, int bonusY, int &nextLocation, int &racerLocation, int &racerX, int &racerY) {
        int bonusRandom = rand() % 3;

        if (bonusRandom == 0) 
        { //Bonus 1
            nextLocation = racerLocation + 3;
            calculateXY(bonusX, bonusY, racerLocation, racerX, racerY);
            cout << "Move forward by 3 steps" << endl;
        } else if (bonusRandom == 1) 
        { //Bonus 2
            nextLocation = racerLocation * 2;
            calculateXY(bonusX, bonusY, racerLocation, racerX, racerY);
            cout << "Double your steps" << endl;
        } else 
        {   //Bonus 3
            nextLocation = racerLocation + step; 
            calculateXY(bonusX, bonusY, racerLocation, racerX, racerY);
            cout << "Get an extra turn" << endl;
        }
    }



    void bonusXY(vector<int> myXbonus) {
        int xCoordinate = 2;
        int yCoordinate = height - 1;
        int coordinate = 0;
        int i = 0;
        while (coordinate < box) {
            if (i < myXbonus.size() && myXbonus[i] == coordinate) {
                bonusX.push_back(xCoordinate);
                bonusY.push_back(yCoordinate);
                i++;
            }

            if ((coordinate >= 0 && coordinate < 10) || coordinate >= (0 + box)) {
                xCoordinate += 4;
            } else if (coordinate >= 10 && coordinate < 20) {
                yCoordinate += 1;
            } else if (coordinate >= 20 && coordinate < 30) {
                xCoordinate -= 4;
            } else if (coordinate < 0 || (coordinate < (0 + box) && coordinate >= box)) {
                yCoordinate -= 1;
            }
            coordinate++;
        }
    }

    void moveForth(int &racerLocation, int &racerX, int racerY){
        racerLocation += 3;
    }

    void doubleSteps(int &racerLocation, int &racerX, int racerY){
        racerLocation *= 2;
    }

    void extraTurn (int &racerLocation, int &racerX, int racerY){
        racerLocation += step;
    }

   void bonusItem_option(int &racerLocation, int &racerX, int &racerY, string racername) {
    cout << "Enter input to use your bonus item (y = Use Bonus, x = Keep Bonus): ";
    char choice;
    cin >> choice;
    if (choice == 'y' || choice == 'Y') { // Logic to use the bonus immediately
        if (bonusFunc.back() == '1') {
            moveForth(xInitial, height-1, racerLocation, racerX, racerY);
            cout << racername << " BONUS ITEM OBTAINED ! " << racername << " move forward 3 steps" << endl << endl;
            bonusFunc.pop_back(); // Remove the used bonus item

        } else if (bonusFunc.back() == '2') {
            doubleSteps(xInitial, height-1, racerLocation, racerX, racerY);
            cout << racername << " BONUS ITEM OBTAINED !" << racername << ", your steps has been doubled" << endl << endl;
            bonusFunc.pop_back(); // Remove the used bonus item

        } else if (bonusFunc.back() == '3') {
            extraTurn(step, xInitial, height-1, racerLocation, racerX, racerY);
            cout << racername << " BONUS ITEM OBTAINED !"  << racername << " you got an extra turn" << endl << endl;

        }
        bonusFunc.pop_back(); // Remove the used bonus item
    } else if (choice == 'x' || choice == 'X') {
        // Logic to store the bonus for later use
        cout << "Bonus item stored for later use." << endl;
    }
}

    void bonusItem_inquiry() {
        cout << "State the number of Bonus items you desire (2-6): ";
        cin >> bonusNum;
        while (bonusNum < 2 || bonusNum > 6) {
            cout << "Please enter a value within the range." << endl;
            cin >> bonusNum;
        }
        cout << "Your Bonus items will be randomly generated." << endl;
        cout << "Remember, to use your Bonus item, click 'Y'." << endl;
        cout << "If you wish to keep your Bonus item, click 'X'." << endl;
    }

    void displayBonusInfo() {
        int counter = 1;
        cout << endl;
        for (int i = 0; i < bonusNum; i++) {
            switch (bonusFunc[i]) {
                case 1:
                    cout << "Bonus Item " << counter << ": Location: (" << bonusX[i] << ", " << bonusY[i] << ") (Move Forward 3 steps)" << endl;
                    break;
                case 2:
                    cout << "Bonus Item " << counter << ": Location: (" << bonusX[i] << ", " << bonusY[i] << ") (Steps got doubled)" << endl;
                    break;
                case 3:
                    cout << "Bonus Item " << counter << ": Location: (" << bonusX[i] << ", " << bonusY[i] << ") (Extra Turn)" << endl;
                    break;
            }
            counter++;
        }
    }
};

void checkWinner()
{
    if (flashLocation > supermanLocation && flashLocation > batmanLocation && flashEnded == true) {
        cout << endl << "Flash Won!" << endl;
        gameRunning = false;
    } else if (supermanLocation > flashLocation && supermanLocation > batmanLocation && supermanEnded == true) {
        cout << endl << "Superman Won!" << endl;
        gameRunning = false;
    } else if (batmanLocation > supermanLocation && batmanLocation > flashLocation && batmanEnded == true) {
        cout << endl << "Batman Won!" << endl;
        gameRunning = false;
    } else if ((batmanLocation == flashLocation == supermanLocation) && 
                (batmanEnded == true && flashEnded == true && supermanEnded == true))
    {
        cout << "Draw!";
    } else if (supermanLocation == flashLocation && flashEnded == true && supermanEnded == true)
    {
        cout << "Draw!";
    } else if (supermanLocation == batmanLocation && batmanEnded == true && supermanEnded == true)
    {
        cout << "Draw!";
    } else if (batmanLocation == flashLocation && flashEnded == true && batmanEnded == true)
    {
        cout << "Draw!";
    }
}

void logic(int coordinateX, int &racerlocation, int &racerX, int &racerY,
            int &roundLeft, bool &playerEnd, int coordinateY = height - 1) {
    int coordinate = 0;
    int ox = coordinateX;
    int oy = coordinateY;

    //check if round end
    if (racerlocation >= box && roundLeft != 1) {
        racerlocation -= box;
        roundLeft -= 1;
    } else if (racerlocation >= box && roundLeft == 1) {
        playerEnd = true;
    }
    //getting x and y for the coordination
    while (coordinate < (box + 10)) {

        if (racerlocation == coordinate) {
            racerX = coordinateX;
            racerY = coordinateY;
            break;
        }

        if ((coordinate >= topLeftCoordinate && coordinate < topRightCoordinate) || coordinate >= (topLeftCoordinate + box)){
            coordinateX += 4;
        } else if (coordinate >= topRightCoordinate && coordinate < botRightCoordinate) {
            coordinateY += 1;
        }  else if (coordinate >= botRightCoordinate && coordinate < box)  {
            coordinateX -= 4;
        } else if (coordinate < topLeftCoordinate ||(coordinate < (topLeftCoordinate + box) && coordinate >= box)){
            coordinateY -= 1;
        }
        
        coordinate ++;

    }
    
}

void box_inquiry() {
    int boxExtraNeeded;
    cout << "How many block do you need? (minimum 42 box and must be even number):" ;
    cin >> box;
    if (box % 2 != 0 || box < 42){
        cout << "Please enter a valid block amount!" << endl;
        box_inquiry();
    }
    boxExtraNeeded = box - 42;
    while (boxExtraNeeded > 0) {
        height += 1;   // expand verticcal
        boxExtraNeeded -= 2;

        topLeftCoordinate ++;
        topRightCoordinate ++;
        botRightCoordinate += 2;

        if (boxExtraNeeded > 0) { 
            width += 4;  //(1 box = 4width (up and down)) expand horizontal
            boxExtraNeeded -= 2;

            topRightCoordinate ++;
            botRightCoordinate ++;
        }
    }
    flashYPosition = height - 1;
    supermanYPosition = height - 1;
    batmanYPosition = height - 1;
}

void lap_inquiry() {
    int num_of_lap;
    do {
        cout << "Number of Lap: ";
        cin >> num_of_lap;
    } while (num_of_lap < 1);
    flashLapLeft = num_of_lap;
    supermanLapLeft = num_of_lap;
    batmanLapLeft = num_of_lap;
}

void flashMove()
{
    srand(time(0));
    step = 2 + (rand() % 5); // 2 - 6
    flashLocation += step;
    cout << endl << "Flash move " << step << " steps." << endl;
    
    logic(1,flashLocation,flashXPosition,flashYPosition,flashLapLeft,flashEnded);
}

void supermanMove()
{
    srand(time(0));
    step = 3 + (rand() % 3); //3 - 5
    supermanLocation += step;
    cout << "Superman move " << step << " steps." << endl;
    
    logic(3,supermanLocation,supermanXPosition,supermanYPosition,supermanLapLeft,supermanEnded);
}

void batmanMove()
{
    srand(time(0));
    step = 3 + (rand() % 4); //3 - 6
    batmanLocation += step;
    cout << "Batman move " << step << " steps." << endl;
    
    logic(2,batmanLocation,batmanXPosition,batmanYPosition,batmanLapLeft,batmanEnded);
}

int main()
{
    string confirmation;
    layout l;
    box_inquiry();
    lap_inquiry();
    l.printLayout();
    while (gameRunning) {
        this_thread::sleep_for(milliseconds(1300)); //pause for 1.3sec
        flashMove();
        supermanMove();
        batmanMove();
        checkWinner();
        l.printLayout();
    }
    cout << endl;
    system("pause");
}
